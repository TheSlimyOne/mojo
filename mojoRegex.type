BNF
    <block>                -> <OPEN_BRACKET>{<statement>}*<BRACKET_CLOSE>
    <statement>            -> <assignment>|<function>|<if>|<for>|<while>
    <assignment>           -> <TYPE><IDENTIFIER><EQUAL>{<expression>|<boolean_expression>}<STATEMENT_TERMINATOR>
    <expression>           -> <term>{(<PLUS>|<MINUS>)<term>}*
    <term>                 -> <factor>{(<MULTPLY>|<DIVIDE>)<factor>}
    <factor>               -> <IDENTIFIER>|<literal>
    <boolean_expression>   -> <expression><EQUALITY><expression>
    <if>                   -> <IF><OPEN_PARENTHESIS><boolean_expression><CLOSE_PARENTHESIS><block><ELSE><block>
    <for>                  -> <FOR><OPEN_PARENTHESIS><statement><boolean_expression><statement><CLOSE_PARENTHESIS><block>
    <while>                -> <WHILE><OPEN_PARENTHESIS><boolean_expression><CLOSE_PARENTHESIS><block>
    <function>             -> <print>
    <print>                -> <PRINT><OPEN_PARENTHESIS><STRING_LITERAL><CLOSE_PARENTHESIS><STATEMENT_TERMINATOR>
    <type>                 -> <INTEGER>|<FLOAT>|<STRING>
    <equality>             -> <EQUAL><EQUAL>
    <literal>              -> <STRING_LITERAL>|<INTEGER_LITERAL>|<FLOAT_LITERAL>
CASTING
    <INTEGER_LITERAL>,<FLOAT_LITERAL> -> <FLOAT>
    <FLOAT_LITERAL>,<INTEGER_LITERAL> -> <FLOAT>
    <FLOAT_LITERAL>,<FLOAT_LITERAL> -> <FLOAT>
    <INTEGER_LITERAL>,<INTEGER_LITERAL> -> <INTEGER>
    <FLOAT>,<FLOAT> -> <FLOAT>
    <FLOAT>,<INTEGER> -> <FLOAT>
    <INTEGER>,<FLOAT> -> <FLOAT>
    <INTEGER>,<INTEGER> -> <INTEGER>
    <FLOAT>,<FLOAT_LITERAL> -> <FLOAT>
    <FLOAT_LITERAL>,<FLOAT> -> <FLOAT>
    <FLOAT>,<INTEGER_LITERAL> -> <FLOAT>
    <INTEGER_LITERAL>,<FLOAT> -> <FLOAT>
    <INTEGER>,<INTEGER_LITERAL> -> <INTEGER>
    <INTEGER_LITERAL>,<INTEGER> -> <INTEGER> 
    <STRING_LITERAL>,<STRING> -> <STRING>
    <STRING>,<STRING_LITERAL> -> <STRING>
TOKEN
    <IF>                   -> if
    <FOR>                  -> for
    <WHILE>                -> while
    <INTEGER>              -> int
    <STRING>               -> string
    <FLOAT>                -> float
    <PRINT>                -> print
    <ELSE>                 -> else
    <IDENTIFIER>           -> [a-zA-Z]([a-zA-Z0-9])*
    <FLOAT_LITERAL>        -> -?([0-9]+.[0-9]+f?|[0-9]+f)
    <QOUTE>                -> "
    <STRING_LITERAL>       -> \"[a-zA-Z0-9]*\"
    <INTEGER_LITERAL>      -> -?[0-9]+
    <OPEN_PARENTHESIS>     -> \(
    <CLOSE_PARENTHESIS>    -> \)
    <OPEN_BRACKET>         -> \{
    <CLOSE_BRACKET>        -> \}
    <NOT>                  -> !
    <AND>                  -> &
    <OR>                   -> |
    <LESSER_THAN>          -> <
    <GREATER_THAN>         -> >
    <PLUS>                 -> \+
    <MINUS>                -> \-
    <DECIMAL>              -> \.
    <DIVISION>             -> \/
    <EQUAL>                -> =
    <STATEMENT_TERMINATOR> -> ;
    <CHARACTERS>           -> [a-zA-Z0-9]*
